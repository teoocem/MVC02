// <auto-generated />
using System;
using DAL.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230821115930_izincalisan-mig")]
    partial class izincalisanmig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Abstract.Calisan", b =>
                {
                    b.Property<int>("CalisanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalisanId"));

                    b.Property<string>("CalisanAd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CalisanAktif")
                        .HasColumnType("bit");

                    b.Property<string>("CalisanSoyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalisanTcNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CalisanTipi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CalisanYas")
                        .HasColumnType("int");

                    b.Property<int>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<decimal>("Maas")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("CalisanId");

                    b.HasIndex("DepartmanId");

                    b.HasIndex("RoleId");

                    b.ToTable("Calisanlar", (string)null);

                    b.HasDiscriminator<string>("CalisanTipi").HasValue("Calisan");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EntityLayer.Concrete.CalisanGorevAtamasi", b =>
                {
                    b.Property<int>("GorevId")
                        .HasColumnType("int");

                    b.Property<int>("CalisanId")
                        .HasColumnType("int");

                    b.Property<int?>("StandartCalisanCalisanId")
                        .HasColumnType("int");

                    b.HasKey("GorevId", "CalisanId");

                    b.HasIndex("CalisanId");

                    b.HasIndex("StandartCalisanCalisanId");

                    b.ToTable("CalisanGorev", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Departman", b =>
                {
                    b.Property<int>("DepartmanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmanId"));

                    b.Property<string>("DepartmanAciklama")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DepartmanAd")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("DepartmanAktif")
                        .HasColumnType("bit");

                    b.HasKey("DepartmanId");

                    b.ToTable("Departmanlar", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Gorev", b =>
                {
                    b.Property<int>("GorevId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GorevId"));

                    b.Property<string>("GorevAciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Görev Açıklaması");

                    b.Property<bool>("GorevAktif")
                        .HasColumnType("bit")
                        .HasColumnName("Görev Durumu");

                    b.Property<string>("GorevBaslik")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Görev Başlığı");

                    b.Property<DateTime>("GorevOlusturulmaTarihi")
                        .HasColumnType("datetime2")
                        .HasColumnName("Oluşturulma Tarihi");

                    b.Property<DateTime>("TahminiBitisTarihi")
                        .HasColumnType("datetime2")
                        .HasColumnName("Tahmini Bitiş Tarihi");

                    b.HasKey("GorevId");

                    b.ToTable("Gorevler", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Izin", b =>
                {
                    b.Property<int>("IzinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IzinId"));

                    b.Property<int>("CalisanId")
                        .HasColumnType("int");

                    b.Property<bool>("IzinAktif")
                        .HasColumnType("bit")
                        .HasColumnName("İzin Aktif");

                    b.Property<DateTime>("IzinBaslangicTarihi")
                        .HasColumnType("datetime2")
                        .HasColumnName("Başlangıç Tarihi");

                    b.Property<DateTime>("IzinBitisTarihi")
                        .HasColumnType("datetime2")
                        .HasColumnName("Bitiş Tarihi");

                    b.Property<int>("IzinTipi")
                        .HasColumnType("int")
                        .HasColumnName("İzin Tipi");

                    b.HasKey("IzinId");

                    b.HasIndex("CalisanId")
                        .IsUnique();

                    b.ToTable("Izinler", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.IzinTalep", b =>
                {
                    b.Property<int>("IzinTalepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IzinTalepId"));

                    b.Property<int>("CalisanId")
                        .HasColumnType("int");

                    b.Property<string>("IzinAciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IzinAciklama");

                    b.Property<DateTime>("IzinBaslangicTarihi")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IzinBitisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("TalepAsama")
                        .HasColumnType("int");

                    b.HasKey("IzinTalepId");

                    b.HasIndex("CalisanId")
                        .IsUnique();

                    b.ToTable("İzinTalepleri", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<int>("CalisanId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginId");

                    b.HasIndex("CalisanId")
                        .IsUnique();

                    b.ToTable("LoginInfo", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EntityLayer.Concrete.RolesDepartman", b =>
                {
                    b.Property<int>("RoleDepartmanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleDepartmanId"));

                    b.Property<int>("DepartmanId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleDepartmanId");

                    b.HasIndex("DepartmanId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleByDepartmanlar", (string)null);
                });

            modelBuilder.Entity("EntityLayer.Concrete.DaireBaskani", b =>
                {
                    b.HasBaseType("EntityLayer.Abstract.Calisan");

                    b.Property<DateTime>("AtanmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("DaireAdı")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("DaireBaskani");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StandartCalisan", b =>
                {
                    b.HasBaseType("EntityLayer.Abstract.Calisan");

                    b.HasDiscriminator().HasValue("Standart");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SubeMuduru", b =>
                {
                    b.HasBaseType("EntityLayer.Abstract.Calisan");

                    b.Property<DateTime>("AtanmaTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubeAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Calisanlar", t =>
                        {
                            t.Property("AtanmaTarihi")
                                .HasColumnName("SubeMuduru_AtanmaTarihi");
                        });

                    b.HasDiscriminator().HasValue("SubeMuduru");
                });

            modelBuilder.Entity("EntityLayer.Abstract.Calisan", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Departman", "Departman")
                        .WithMany("Calisanlar")
                        .HasForeignKey("DepartmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Roles", "Role")
                        .WithMany("Calisanlar")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departman");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EntityLayer.Concrete.CalisanGorevAtamasi", b =>
                {
                    b.HasOne("EntityLayer.Abstract.Calisan", "Calisan")
                        .WithMany("CalisanGorevAtamasi")
                        .HasForeignKey("CalisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Gorev", "Gorev")
                        .WithMany("GorevCalisanlar")
                        .HasForeignKey("GorevId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.StandartCalisan", null)
                        .WithMany("Gorevler")
                        .HasForeignKey("StandartCalisanCalisanId");

                    b.Navigation("Calisan");

                    b.Navigation("Gorev");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Izin", b =>
                {
                    b.HasOne("EntityLayer.Abstract.Calisan", "Calisan")
                        .WithOne("Izin")
                        .HasForeignKey("EntityLayer.Concrete.Izin", "CalisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calisan");
                });

            modelBuilder.Entity("EntityLayer.Concrete.IzinTalep", b =>
                {
                    b.HasOne("EntityLayer.Abstract.Calisan", "Calisan")
                        .WithOne("IzinTalebi")
                        .HasForeignKey("EntityLayer.Concrete.IzinTalep", "CalisanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calisan");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Login", b =>
                {
                    b.HasOne("EntityLayer.Abstract.Calisan", "Calisan")
                        .WithOne("LoginInfo")
                        .HasForeignKey("EntityLayer.Concrete.Login", "CalisanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Calisan");
                });

            modelBuilder.Entity("EntityLayer.Concrete.RolesDepartman", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Departman", "Departman")
                        .WithMany("RoleDepartmanlar")
                        .HasForeignKey("DepartmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Concrete.Roles", "Role")
                        .WithMany("RoleDepartmanlar")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departman");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EntityLayer.Abstract.Calisan", b =>
                {
                    b.Navigation("CalisanGorevAtamasi");

                    b.Navigation("Izin")
                        .IsRequired();

                    b.Navigation("IzinTalebi")
                        .IsRequired();

                    b.Navigation("LoginInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("EntityLayer.Concrete.Departman", b =>
                {
                    b.Navigation("Calisanlar");

                    b.Navigation("RoleDepartmanlar");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Gorev", b =>
                {
                    b.Navigation("GorevCalisanlar");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Roles", b =>
                {
                    b.Navigation("Calisanlar");

                    b.Navigation("RoleDepartmanlar");
                });

            modelBuilder.Entity("EntityLayer.Concrete.StandartCalisan", b =>
                {
                    b.Navigation("Gorevler");
                });
#pragma warning restore 612, 618
        }
    }
}
